#!/usr/bin/env php
<?php

if ((! @include __DIR__.'/../../../autoload.php') && (! @include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:' . PHP_EOL .
         'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
         'php composer.phar install' . PHP_EOL
    );
}

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;
use dflydev\markdown\MarkdownExtraParser;

$console = new Application;
$console
    ->register('generate')
    ->addArgument(
        'src',
        InputArgument::REQUIRED,
        'Location of invoice; ex: "paid", "unpaid"'
    )
    ->addArgument(
        'invoice',
        InputArgument::OPTIONAL,
        'What invoice to generate for?'
    )
    ->addOption(
        'output',
        null,
        InputOption::VALUE_OPTIONAL,
        'Output to format; HTML or PDF',
        'pdf'
    )
    ->addOption(
        'out',
        null,
        InputOption::VALUE_OPTIONAL,
        'Output HTML or PDF to what directory (absolute directory path)',
        null
    )
    ->setDescription('Generates HTML versions of a Markdown Invoice.')
    ->setCode(function(InputInterface $input, OutputInterface $output) use($console) {
        $output_format = $input->getOption('output');
        $out_path      = $input->getOption('out');
        $invoice       = $input->getArgument('invoice');
        $invoice_src   = $input->getArgument('src');

        $invoice_dir = __DIR__."/../invoices/{$invoice_src}/";
        $output_dir  = $out_path ?: __DIR__."/../output";
        $layout_path = __DIR__.'/../invoices/layout.html';

        $filesystem = new Filesystem;

        if (null === $invoice) {
            $output->writeln('');

            $i      = 0;
            $finder = new Finder;
            $finder->files()->in($invoice_dir);
            foreach ($finder as $file) {
                if (in_array($file->getExtension(), ['md', 'markdown'])) {
                    $files[$i] = str_replace(['.md', '.markdown'], '', $file->getBasename());
                    $i++;
                }
            }

            $dialog  = $console->getHelperSet()->get('dialog');
            $invoice = $dialog->select($output, 'Invoice number: ', $files, 0);

            $output->writeln('');
        }

        $output->writeln("<comment>Generating for invoice \"{$files[$invoice]}\"...</comment>");

        $invoice_path = $invoice_dir.$files[$invoice].'.md';
        $save_path    = $output_dir.'/'.$files[$invoice].'.html';

        if (! $filesystem->exists($invoice_path)) {
            $output->writeln("<error>Invoice \"{$files[$invoice]}\" does not seem to exit under \"{$invoice_src}\".</error>");
            exit;
        }

        $markdown_parser = new MarkdownExtraParser;
        $html            = $markdown_parser->transformMarkdown(file_get_contents($invoice_path));

        $layout = str_replace('{{ html }}', $html, file_get_contents($layout_path));
        file_put_contents($save_path, $layout);

        $output->writeln('');
        $output->writeln("<info>Invoice generated.</info>");

        if ($output_format ==  'pdf') {
            $pdf_save_path = substr_replace($save_path, 'pdf', strlen($save_path)-4, 4);

            $process = new Process("wkhtmltopdf {$save_path} {$pdf_save_path}");
            $process->run();
            if (! $process->isSuccessful()) {
                throw new \RuntimeException($process->getErrorOutput());
            }

            $output->writeln("<info>PDF saved to: {$pdf_save_path}</info>");
        } else {
            $output->writeln("<info>HTML saved to: {$save_path}</info>");
        }
    });
$console->run();
